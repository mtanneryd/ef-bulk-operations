// <auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Infrastructure;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace Tanneryd.BulkOperations.EFCore.SQLite.Tests
{
    public interface IUnitTestContext : IDisposable
    {
        DbSet<BatchInvoice> BatchInvoices { get; set; }
        DbSet<BatchInvoiceItem> BatchInvoiceItems { get; set; }
        DbSet<Blog> Blogs { get; set; }
        DbSet<CoachTeamsWithDbGeneratedGuid> CoachTeamsWithDbGeneratedGuids { get; set; }
        DbSet<CoachTeamsWithUserGeneratedGuid> CoachTeamsWithUserGeneratedGuids { get; set; }
        DbSet<CoachWithDbGeneratedGuid> CoachWithDbGeneratedGuids { get; set; }
        DbSet<CoachWithUserGeneratedGuid> CoachWithUserGeneratedGuids { get; set; }
        DbSet<Company> Companies { get; set; }
        DbSet<Composite> Composites { get; set; }
        DbSet<CompositePrime> CompositePrimes { get; set; }
        DbSet<Coordinate> Coordinates { get; set; }
        DbSet<Course> Courses { get; set; }
        DbSet<CourseInstructor> CourseInstructors { get; set; }
        DbSet<Department> Departments { get; set; }
        DbSet<Employee> Employees { get; set; }
        DbSet<EmptyTable> EmptyTables { get; set; }
        DbSet<Instructor> Instructors { get; set; }
        DbSet<Invoice> Invoices { get; set; }
        DbSet<InvoiceItem> InvoiceItems { get; set; }
        DbSet<Journal> Journals { get; set; }
        DbSet<Keyword> Keywords { get; set; }
        DbSet<LogItem> LogItems { get; set; }
        DbSet<Number> Numbers { get; set; }
        DbSet<OfficeAssignment> OfficeAssignments { get; set; }
        DbSet<Parity> Parities { get; set; }
        DbSet<Person> People { get; set; }
        DbSet<PlayerWithDbGeneratedGuid> PlayerWithDbGeneratedGuids { get; set; }
        DbSet<PlayerWithUserGeneratedGuid> PlayerWithUserGeneratedGuids { get; set; }
        DbSet<Point> Points { get; set; }
        DbSet<Post> Posts { get; set; }
        DbSet<Price> Prices { get; set; }
        DbSet<Prime> Primes { get; set; }
        DbSet<ReservedSqlKeyword> ReservedSqlKeywords { get; set; }
        DbSet<TeamWithDbGeneratedGuid> TeamWithDbGeneratedGuids { get; set; }
        DbSet<TeamWithUserGeneratedGuid> TeamWithUserGeneratedGuids { get; set; }
        DbSet<Visitor> Visitors { get; set; }
        DbSet<VisitorPost> VisitorPosts { get; set; }

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);
    }
}
// </auto-generated>
