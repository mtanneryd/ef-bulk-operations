// <auto-generated>

using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Tanneryd.BulkOperations.EFCore.SQLite.Tests
{
    public class UnitTestContext : DbContext, IUnitTestContext
    {
        public UnitTestContext()
        {
        }

        public UnitTestContext(DbContextOptions<UnitTestContext> options)
            : base(options)
        {
        }

        public DbSet<BatchInvoice> BatchInvoices { get; set; }
        public DbSet<BatchInvoiceItem> BatchInvoiceItems { get; set; }
        public DbSet<Blog> Blogs { get; set; }
        public DbSet<CoachTeamsWithDbGeneratedGuid> CoachTeamsWithDbGeneratedGuids { get; set; }
        public DbSet<CoachTeamsWithUserGeneratedGuid> CoachTeamsWithUserGeneratedGuids { get; set; }
        public DbSet<CoachWithDbGeneratedGuid> CoachWithDbGeneratedGuids { get; set; }
        public DbSet<CoachWithUserGeneratedGuid> CoachWithUserGeneratedGuids { get; set; }
        public DbSet<Company> Companies { get; set; }
        public DbSet<Composite> Composites { get; set; }
        public DbSet<CompositePrime> CompositePrimes { get; set; }
        public DbSet<Coordinate> Coordinates { get; set; }
        public DbSet<Course> Courses { get; set; }
        public DbSet<CourseInstructor> CourseInstructors { get; set; }
        public DbSet<Department> Departments { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<EmptyTable> EmptyTables { get; set; }
        public DbSet<Instructor> Instructors { get; set; }
        public DbSet<Invoice> Invoices { get; set; }
        public DbSet<InvoiceItem> InvoiceItems { get; set; }
        public DbSet<Journal> Journals { get; set; }
        public DbSet<Keyword> Keywords { get; set; }
        public DbSet<LogItem> LogItems { get; set; }
        public DbSet<Number> Numbers { get; set; }
        public DbSet<OfficeAssignment> OfficeAssignments { get; set; }
        public DbSet<Parity> Parities { get; set; }
        public DbSet<Person> People { get; set; }
        public DbSet<PlayerWithDbGeneratedGuid> PlayerWithDbGeneratedGuids { get; set; }
        public DbSet<PlayerWithUserGeneratedGuid> PlayerWithUserGeneratedGuids { get; set; }
        public DbSet<Point> Points { get; set; }
        public DbSet<Post> Posts { get; set; }
        public DbSet<Price> Prices { get; set; }
        public DbSet<Prime> Primes { get; set; }
        public DbSet<ReservedSqlKeyword> ReservedSqlKeywords { get; set; }
        public DbSet<TeamWithDbGeneratedGuid> TeamWithDbGeneratedGuids { get; set; }
        public DbSet<TeamWithUserGeneratedGuid> TeamWithUserGeneratedGuids { get; set; }
        public DbSet<Visitor> Visitors { get; set; }
        public DbSet<VisitorPost> VisitorPosts { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                //optionsBuilder.UseSqlite(@"Data Source=C:\development\mtanneryd\ef-bulk-operations\Tanneryd.BulkOperations.EFCore\Tanneryd.BulkOperations.EFCore.SQLite.Tests\unittests.db;Version=3;");
                optionsBuilder.UseSqlite(@"Data Source=UnitTestInMemoryDb;Mode=Memory;Cache=Shared");
            }
        }

        public bool IsSqlParameterNull(SqliteParameter param)
        {
            var sqlValue = param.Value;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new BatchInvoiceConfiguration());
            modelBuilder.ApplyConfiguration(new BatchInvoiceItemConfiguration());
            modelBuilder.ApplyConfiguration(new BlogConfiguration());
            modelBuilder.ApplyConfiguration(new CoachTeamsWithDbGeneratedGuidConfiguration());
            modelBuilder.ApplyConfiguration(new CoachTeamsWithUserGeneratedGuidConfiguration());
            modelBuilder.ApplyConfiguration(new CoachWithDbGeneratedGuidConfiguration());
            modelBuilder.ApplyConfiguration(new CoachWithUserGeneratedGuidConfiguration());
            modelBuilder.ApplyConfiguration(new CompanyConfiguration());
            modelBuilder.ApplyConfiguration(new CompositeConfiguration());
            modelBuilder.ApplyConfiguration(new CompositePrimeConfiguration());
            modelBuilder.ApplyConfiguration(new CoordinateConfiguration());
            modelBuilder.ApplyConfiguration(new CourseConfiguration());
            modelBuilder.ApplyConfiguration(new CourseInstructorConfiguration());
            modelBuilder.ApplyConfiguration(new DepartmentConfiguration());
            modelBuilder.ApplyConfiguration(new EmployeeConfiguration());
            modelBuilder.ApplyConfiguration(new EmptyTableConfiguration());
            modelBuilder.ApplyConfiguration(new InstructorConfiguration());
            modelBuilder.ApplyConfiguration(new InvoiceConfiguration());
            modelBuilder.ApplyConfiguration(new InvoiceItemConfiguration());
            modelBuilder.ApplyConfiguration(new JournalConfiguration());
            modelBuilder.ApplyConfiguration(new KeywordConfiguration());
            modelBuilder.ApplyConfiguration(new LogItemConfiguration());
            modelBuilder.ApplyConfiguration(new NumberConfiguration());
            modelBuilder.ApplyConfiguration(new OfficeAssignmentConfiguration());
            modelBuilder.ApplyConfiguration(new ParityConfiguration());
            modelBuilder.ApplyConfiguration(new PersonConfiguration());
            modelBuilder.ApplyConfiguration(new PlayerWithDbGeneratedGuidConfiguration());
            modelBuilder.ApplyConfiguration(new PlayerWithUserGeneratedGuidConfiguration());
            modelBuilder.ApplyConfiguration(new PointConfiguration());
            modelBuilder.ApplyConfiguration(new PostConfiguration());
            modelBuilder.ApplyConfiguration(new PriceConfiguration());
            modelBuilder.ApplyConfiguration(new PrimeConfiguration());
            modelBuilder.ApplyConfiguration(new ReservedSqlKeywordConfiguration());
            modelBuilder.ApplyConfiguration(new TeamWithDbGeneratedGuidConfiguration());
            modelBuilder.ApplyConfiguration(new TeamWithUserGeneratedGuidConfiguration());
            modelBuilder.ApplyConfiguration(new VisitorConfiguration());
            modelBuilder.ApplyConfiguration(new VisitorPostConfiguration());

            modelBuilder.Entity<BatchInvoiceItem>().ToTable(tb => tb.HasTrigger("fku_BatchInvoiceItem_InvoiceId_Invoice_PrimaryKey"));
            modelBuilder.Entity<CoachTeamsWithDbGeneratedGuid>().ToTable(tb => tb.HasTrigger("fku_CoachTeamsWithDbGeneratedGuid_TeamId_TeamWithDbGeneratedGuid_Id"));
            modelBuilder.Entity<CoachTeamsWithUserGeneratedGuid>().ToTable(tb => tb.HasTrigger("fku_CoachTeamsWithUserGeneratedGuid_TeamId_TeamWithUserGeneratedGuid_Id"));
            modelBuilder.Entity<Composite>().ToTable(tb => tb.HasTrigger("fku_Composite_NumberId_Number_Id"));
            modelBuilder.Entity<CompositePrime>().ToTable(tb => tb.HasTrigger("fku_CompositePrime_PrimeId_Prime_NumberId"));
            modelBuilder.Entity<Course>().ToTable(tb => tb.HasTrigger("fku_Course_DepartmentID_Department_DepartmentID"));
            modelBuilder.Entity<CourseInstructor>().ToTable(tb => tb.HasTrigger("fku_CourseInstructor_InstructorID_Instructor_InstructorID"));
            modelBuilder.Entity<InvoiceItem>().ToTable(tb => tb.HasTrigger("fku_InvoiceItem_JournalId_Journal_PrimaryKey"));
            modelBuilder.Entity<Keyword>().ToTable(tb => tb.HasTrigger("fku_Keyword_PostId_Post_Id"));
            modelBuilder.Entity<Number>().ToTable(tb => tb.HasTrigger("fku_Number_ParityId_Parity_Key"));
            modelBuilder.Entity<OfficeAssignment>().ToTable(tb => tb.HasTrigger("fku_OfficeAssignment_InstructorID_Instructor_InstructorID"));
            modelBuilder.Entity<Person>().ToTable(tb => tb.HasTrigger("fku_Person_MotherId_Person_Id"));
            modelBuilder.Entity<PlayerWithDbGeneratedGuid>().ToTable(tb => tb.HasTrigger("fku_PlayerWithDbGeneratedGuid_TeamId_TeamWithDbGeneratedGuid_Id"));
            modelBuilder.Entity<PlayerWithUserGeneratedGuid>().ToTable(tb => tb.HasTrigger("fku_PlayerWithUserGeneratedGuid_TeamId_TeamWithUserGeneratedGuid_Id"));
            modelBuilder.Entity<Point>().ToTable(tb => tb.HasTrigger("fku_Point_YCoordinateId_Coordinate_Id"));
            modelBuilder.Entity<Post>().ToTable(tb => tb.HasTrigger("fku_Post_BlogId_Blog_Id"));
            modelBuilder.Entity<Prime>().ToTable(tb => tb.HasTrigger("fku_Prime_NumberId_Number_Id"));
            modelBuilder.Entity<VisitorPost>().ToTable(tb => tb.HasTrigger("fku_VisitorPosts_VisitorId_Visitor_Id"));
        }

    }
}
// </auto-generated>
